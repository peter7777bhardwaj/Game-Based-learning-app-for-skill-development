import tkinter as tk

# outline the programming questions, alternatives, and answers
questions = [
    "What is the output of print(2**3) in Python?",
    "Which keyword is used to create a function in Python?",
    "What is the correct file extension for Python files?",
    "Which language is primarily used for web development?",
    "What is the main difference between a list and a tuple in Python?",
    "What does 'var' mean in JavaScript?",
    "What is the purpose of inheritance in object-oriented programming?",
    "Which keyword is used to define a class in Java?",
    "How do you write a comment in Python?",
    "What is the use of the 'import' statement in Python?"
]

options = [
    ["6", "8", "9", "7"],
    ["function", "def", "fun", "define"],
    [".pyth", ".pt", ".pyt", ".py"],
    ["Python", "C++", "JavaScript", "Java"],
    ["Lists are immutable, tuples are mutable", "Lists are mutable, tuples are immutable", "Both are mutable", "Both are immutable"],
    ["Variable declaration", "Function declaration", "Class declaration", "None of the above"],
    ["Code reuse", "Memory management", "Syntax highlighting", "None of the above"],
    ["class", "Class", "define", "function"],
    ["# that is a comment", "// this is a comment", "/* that is a remark */", ""],
    ["To include functions from other modules", "To declare variables", "To define classes", "To handle exceptions"]
]

solutions = [
    "8", "def", ".py", "JavaScript", 
    "Lists are mutable, tuples are immutable", "Variable declaration", 
    "Code reuse", "class", 
    "# This is a comment", 
    "To include functions from other modules"
]

magnificence QuizApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Programming Quiz sport")
        self.root.attributes('-fullscreen', proper)
        self.root.configure(bg="#2e2e2e")

        # close and minimize Buttons
        self.nav_frame = tk.body(root, bg="#2e2e2e")
        self.nav_frame.%(side=tk.pinnacle, anchor="ne")

        self.close_button = tk.Button(self.nav_frame, text="X", command=root.damage, bg="#FF4C4C", fg="#ffffff", font=("Arial", 14))
        self.close_button.percent(facet=tk.proper)

        self.minimize_button = tk.Button(self.nav_frame, textual content="_", command=self.root.iconify, bg="#FFCC00", fg="#ffffff", font=("Arial", 14))
        self.minimize_button.p.c.(side=tk.proper)

        self.main_frame = tk.body(root, bg="#2e2e2e", bd=five, comfort=tk.RIDGE)
        self.main_frame.p.c.(expand=real)

        self.title_label = tk.Label(self.main_frame, textual content="PROQUIZ", font=("Arial", 48, "ambitious"), bg="#2e2e2e", fg="#ffffff")
        self.title_label.p.c.(pady=20)

        self.start_button = tk.Button(self.main_frame, text="begin game", command=self.start_game, font=("Arial", 24), bg="#00a86b", fg="#ffffff")
        self.start_button.p.c.(pady=20, fill=tk.X, padx=30)

        self.quit_button = tk.Button(self.main_frame, text="cease", command=root.ruin, font=("Arial", 24), bg="#FF4C4C", fg="#ffffff")
        self.quit_button.percent(pady=20, fill=tk.X, padx=30)

    def start_game(self):
        self.main_frame.spoil()
        self.create_quiz_interface()

    def create_quiz_interface(self):
        self.question_frame = tk.body(self.root, bg="#2e2e2e", bd=5, alleviation=tk.RIDGE)
        self.question_frame.percent(make bigger=genuine)

        self.question_label = tk.Label(self.question_frame, textual content="", font=("Arial", 18), bg="#2e2e2e", fg="#ffffff")
        self.question_label.%(pady=20)

        self.user_answer = tk.StringVar(fee="")
        self.option_buttons = []
        for i in range(four):
            rb = tk.Radiobutton(self.question_frame, text="", variable=self.user_answer, cost='', font=("Arial", sixteen), bg="#2e2e2e", fg="#ffffff", anchor="w", command=lambda i=i: self.select_option(i))
            rb.percent(fill="x", padx=20, pady=five)
            self.option_buttons.append(rb)

        self.nav_frame = tk.body(self.question_frame, bg="#2e2e2e")
        self.nav_frame.%(pady=20)

        self.prev_button = tk.Button(self.nav_frame, textual content="preceding", command=self.prev_question, font=("Arial", 16), bg="#00a86b", fg="#ffffff")
        self.prev_button.percent(aspect=tk.LEFT, padx=10)

        self.next_button = tk.Button(self.nav_frame, text="subsequent", command=self.next_question, font=("Arial", sixteen), bg="#00a86b", fg="#ffffff")
        self.next_button.percent(side=tk.proper, padx=10)

        self.submit_button = tk.Button(self.nav_frame, text="publish", command=self.submit_answer, font=("Arial", 16), bg="#00a86b", fg="#ffffff")

        self.question_index = 0
        self.rating = zero
        self.user_answers = [""] * len(questions)

        self.quit_button = tk.Button(self.nav_frame, textual content="stop", command=self.root.wreck, font=("Arial", sixteen), bg="#FF4C4C", fg="#ffffff")
        self.quit_button.%(aspect=tk.LEFT, padx=10)

        self.update_question()
        self.update_navigation_buttons()

    def select_option(self, index):
        for i, button in enumerate(self.option_buttons):
            button.config(fg="#ffffff")  # Reset shade
        self.option_buttons[index].config(fg="#00ff00")  # alternate color to inexperienced

    def update_question(self):
        self.question_label.config(text=questions[self.question_index])
        for i in range(4):
            self.option_buttons[i].config(text=alternatives[self.question_index][i], price=alternatives[self.question_index][i])
            self.option_buttons[i].deselect()
            self.option_buttons[i].config(fg="#ffffff")  # Reset color

    def update_navigation_buttons(self):
        if self.question_index == len(questions) - 1:
            self.next_button.pack_forget()
            self.submit_button.%(side=tk.proper, padx=10)
        else:
            self.submit_button.pack_forget()
            self.next_button.percent(side=tk.proper, padx=10)

        if self.question_index > zero:
            self.prev_button.percent(side=tk.LEFT, padx=10)
        else:
            self.prev_button.pack_forget()

    def next_question(self):
        if self.user_answer.get() == answers[self.question_index]:
            self.score += 1
        self.user_answers[self.question_index] = self.user_answer.get()
        self.question_index += 1
        self.update_question()
        self.update_navigation_buttons()

    def prev_question(self):
        if self.question_index > 0:
            self.user_answers[self.question_index] = self.user_answer.get()
            self.question_index -= 1
            self.update_question()
            self.update_navigation_buttons()

    def submit_answer(self):
        self.user_answers[self.question_index] = self.user_answer.get()

        if self.user_answers[self.question_index] == answers[self.question_index]:
            self.score += 1

        if self.question_index == len(questions) - 1:
            self.show_result()
        else:
            self.next_question()

    def show_result(self):
        result_frame = tk.frame(self.root, bg="#2e2e2e", bd=five, alleviation=tk.RIDGE)
        result_frame.p.c.(enlarge=real, fill=tk.both, padx=20, pady=20)

        result_text = f"Your score: {self.score} out of {len(questions)}nn"
        wrong_answers = []

        for i in range(len(questions)):
            if self.user_answers[i] != solutions[i]:
                wrong_answers.append(f"Q{i + 1}: {questions[i]} - Your solution: {self.user_answers[i]} | accurate solution: {solutions[i]}")

        if no longer wrong_answers:
            result_text += "You answered all questions efficiently! exceptional!"
        else:
            result_text += "n".be part of(wrong_answers)

        feedback = self.get_feedback(self.rating)
        result_text += f"nnFeedback: {remarks}"

        result_label = tk.Label(result_frame, textual content=result_text, font=("Arial", sixteen), bg="#2e2e2e", fg="#ffffff")
        result_label.percent(pady=20)

        close_button = tk.Button(result_frame, text="near", command=self.root.spoil, font=("Arial", 16), bg="#FF4C4C", fg="#ffffff")
        close_button.p.c.(pady=20)

    def get_feedback(self, rating):
        if score == 10:
            go back "amazing!"
        elif score >= 8:
            return "well executed!"
        elif score >= 6:
            go back "maintain going!"
        elif rating >= four:
            return "You need to improve!"
        elif rating >= 2:
            return "try difficult!"
        else:
            go back "higher success next time!"

def create_quiz_app():
    root = tk.Tk()
    app = QuizApp(root)
    root.mainloop()

# Run the app
create_quiz_app()

